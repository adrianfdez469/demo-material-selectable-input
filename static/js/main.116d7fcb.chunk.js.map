{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","allCountries","setAllCountries","selected","setSelected","useEffect","a","fetch","countriesResp","ok","json","countries","console","log","mappedCountries","map","c","id","name","text","population","flag","style","margin","fontSize","Typography","variant","optionsList","excludedOptions","onAdd","item","textFieldProps","display","flexDirection","alignItems","alt","src","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRA2DeA,EArDH,WAAO,IAAD,EACwBC,IAAMC,SAAS,IADvC,mBACTC,EADS,KACKC,EADL,OAEgBH,IAAMC,SAAS,IAF/B,mBAETG,EAFS,KAECC,EAFD,KAGhBL,IAAMM,WAAU,WACd,sBAAC,gCAAAC,EAAA,sEAC6BC,MAAM,wCADnC,YACOC,EADP,QAEmBC,GAFnB,iCAG2BD,EAAcE,OAHzC,OAGSC,EAHT,OAIGC,QAAQC,IAAIF,GACNG,EAAkBH,EAAUI,KAAI,SAAAC,GAEpC,MAAO,CAAEC,GAAID,EAAEE,KAAMC,KAAMH,EAAEE,KAAME,WAAYJ,EAAEI,WAAYC,KAAML,EAAEK,SAEvEnB,EAAgBY,GATnB,2CAAD,KAYC,IAMH,OACE,sBAAKQ,MAAO,CAAEC,OAAQ,OAAQC,SAAU,QAAxC,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,iEACA,+BACE,6BAAI,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,iHACJ,6BAAI,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,qGACJ,6BAAI,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,8LACJ,6BAAI,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,iKACJ,6BAAI,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,sFACJ,6BAAI,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,4KAGN,cAAC,IAAD,CAAaC,YAAa1B,EAAc2B,gBAAiBzB,EAAU0B,MAhBlD,SAACC,GACpB1B,EAAY,GAAD,mBAAKD,GAAL,CAAe2B,MAegEC,eAAgB,CACtGL,QAAS,cAGTvB,EAASY,KAAI,SAAAe,GAAI,OACf,sBAAKR,MAAO,CAAEU,QAAS,OAAQC,cAAe,MAAOC,WAAY,UAAjE,UACE,qBAAKC,IAAI,OAAOC,IAAKN,EAAKT,KAAMC,MAAO,CAAEe,MAAO,OAAQC,OAAQ,OAAQf,OAAQ,SAChF,cAACE,EAAA,EAAD,CACEC,QAAQ,QADV,4BAIeI,EAAKX,KAJpB,2BAI2CW,EAAKV,aAFzCU,EAAKX,gBCrCToB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.116d7fcb.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, Icon } from '@material-ui/core';\nimport InputSelect from 'react-material-selectable-inputtext';\n\n\n\nconst App = () => {\n  const [allCountries, setAllCountries] = React.useState([]);\n  const [selected, setSelected] = React.useState([]);\n  React.useEffect(() => {\n    (async () => {\n      const countriesResp = await fetch('https://restcountries.eu/rest/v2/all');\n      if (countriesResp.ok) {\n        const countries = await countriesResp.json();\n        console.log(countries);\n        const mappedCountries = countries.map(c => {\n          // The object passed to the optionsList prop and excludedOptions must have id and text properties\n          return { id: c.name, text: c.name, population: c.population, flag: c.flag }\n        });\n        setAllCountries(mappedCountries);\n      }\n    })()\n  }, []);\n\n  const onAddHandler = (item) => {\n    setSelected([...selected, item]);\n  }\n\n  return (\n    <div style={{ margin: '20px', fontSize: '20px' }}>\n      <Typography variant=\"h3\">To see what the component can do, follow the steps.</Typography>\n      <ol>\n        <li><Typography variant=\"body1\">Focus the component and white an \"A\" letter, it will pop up all the countries that begin with \"A\"</Typography></li>\n        <li><Typography variant=\"body1\">Press the arrow down key from your keyboard, and choose \"Albania\", then press \"Enter\"</Typography></li>\n        <li><Typography variant=\"body1\">Again write an \"A\" letter, you'll see that \"Albania\" is no longer available. This time with your mouse select other country option and press \"Enter\" or press the plus button</Typography></li>\n        <li><Typography variant=\"body1\">Now write anther country name without selecting it from the list and added, you can see after that the country is no logner available on the list</Typography></li>\n        <li><Typography variant=\"body1\">Also you can write anything that is not on the list, and added as well</Typography></li>\n        <li><Typography variant=\"body1\">Be aware that we you write a substring, you can navigate throgth the options with down arrow key, but you can comeback to the input with the ip arrow key</Typography></li>\n      </ol>\n\n      <InputSelect optionsList={allCountries} excludedOptions={selected} onAdd={onAddHandler} textFieldProps={{\n        variant: \"outlined\"\n      }} />\n      {\n        selected.map(item =>\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n            <img alt=\"Flag\" src={item.flag} style={{ width: '24px', height: '24px', margin: '5px' }} />\n            <Typography\n              variant=\"body1\"\n              key={item.text}\n            >\n              {`Country: ${item.text} |  Population: ${item.population}`}\n            </Typography>\n          </div>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}